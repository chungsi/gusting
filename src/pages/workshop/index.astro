---
// import moonfairy from '@assets/workshop/moonfairy.riv'
import ContentLayout from '@layouts/ContentLayout.astro'
---

<ContentLayout class='relative max-w-[80rem]'>
  <section class:list={['relative aspect-3/2 max-h-[58rem] w-full rounded-xl', 'bg-[#06060D]']}>
    <div
      class:list={[
        'absolute top-1/2 left-1/2 h-[28rem] w-[28rem] -translate-x-1/2 -translate-y-1/2 rounded-full',
        'bg-linear-170/oklch from-[#242548] from-15% via-[#1B1D53] to-[#5A6197]',
      ]}
    >
    </div>
    <p class='font-th-display top-md left-lg absolute text-9xl text-white italic'>09</p>
    <p class='font-th-display bottom-xl right-lg absolute text-8xl text-white italic'>moonlight</p>
    <canvas
      id='canvas'
      class='relative z-10 h-full w-full'
      width='980'
      height='650'
    ></canvas>
  </section>
</ContentLayout>

<script>
  import RiveWebGl from '@rive-app/webgl2-advanced'

  async function main() {
    const riveInstance = await RiveWebGl({
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      locateFile: (_) => `https://unpkg.com/@rive-app/webgl2-advanced@2.26.5/rive.wasm`,
    })

    const canvas = document.getElementById('canvas') as HTMLCanvasElement

    const renderer = riveInstance.makeRenderer(canvas, true)
    const bytes = await (await fetch(new Request('/workshop/moonfairy.riv'))).arrayBuffer()
    const file = await riveInstance.load(new Uint8Array(bytes))
    const artboard = file.defaultArtboard()
    const animation = new riveInstance.LinearAnimationInstance(
      artboard.animationByName('idle'),
      artboard,
    )
    // const stateMachine = new riveInstance.StateMachineInstance(
    //   artboard.stateMachineByName('animation'),
    //   artboard,
    // )
    console.log(file, animation)

    let lastTime = 0
    function renderLoop(time: number) {
      if (!lastTime) {
        lastTime = time
      }
      const elapsedTimeMs = time - lastTime
      const elapsedTimeSec = elapsedTimeMs / 1000
      lastTime = time

      renderer.clear()
      if (artboard) {
        if (animation) {
          animation.advance(elapsedTimeSec)
          animation.apply(1)
        }
        artboard.advance(elapsedTimeSec)
        renderer.save()
        renderer.align(
          riveInstance.Fit.contain,
          riveInstance.Alignment.center,
          {
            minX: 0,
            minY: 0,
            maxX: canvas.width,
            maxY: canvas.height,
          },
          artboard.bounds,
        )
        artboard.draw(renderer)
        renderer.restore()
      }

      renderer.flush()
      riveInstance.requestAnimationFrame(renderLoop)
    }
    riveInstance.requestAnimationFrame(renderLoop)
  }

  main()

  // const riveInstance = new Rive({
  //   src: '/workshop/moonfairy.riv',
  //   canvas: document.getElementById('canvas') as HTMLCanvasElement,
  //   useOffscreenRenderer: true,
  //   artboard: 'Base',
  //   // animations: ['idle', 'blink'],
  //   stateMachines: 'animation',
  //   autoplay: true,
  //   onLoad: () => {
  //     console.log('Rive loaded')
  //     riveInstance.resizeDrawingSurfaceToCanvas()
  //   },
  // })
</script>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400..900;1,400..900&display=swap');
  /* @reference '../../css/global.css'; */

  .font-th-display {
    font-family: 'Playfair Display', serif;
    font-style: italic;
    font-optical-sizing: auto;
    font-weight: 600;
  }
</style>
