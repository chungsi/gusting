---
import ProjectHeader from '@components/ProjectHeader.astro'
import ProjectToc from '@components/ProjectToc.astro'
import type { GetStaticPaths } from 'astro'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import ContentLayout from 'src/layouts/ContentLayout.astro'

export const getStaticPaths = (async () => {
  const projects = await getCollection('projects')
  return projects.map((project) => ({
    params: {
      // This creates a path/page for collection entry
      slug: project.slug,
    },
    props: {
      project,
    },
  }))
}) satisfies GetStaticPaths

// type Params = InferGetStaticParamsType<typeof getStaticPaths>
// type Props = InferGetStaticPropsType<typeof getStaticPaths>

type Props = { project: CollectionEntry<'projects'> }

const { project }: Props = Astro.props
const { Content, headings } = await project.render()

// This gets the structure from the collection schema
const { category, heroImage, templateType } = project.data

const projectTemplate = templateType === 'project'
const galleryTemplate = templateType === 'gallery'
---

<ContentLayout
  bodyClass={category}
  class:list={[
    // 'project-grid',
    projectTemplate && 'project-grid relative max-w-[100rem]',
    galleryTemplate && 'max-w-7xl',
  ]}
>
  <ProjectHeader
    project={project.data}
    slot='header'
    class='project-head'
  />

  {
    projectTemplate && !!heroImage && (
      <div class='project-hero relative'>
        <Image
          src={heroImage}
          alt='some alt text'
          class:list={[
            'absolute right-0 top-[-1rem] opacity-70 ',
            'block max-w-[7rem]',
            'md:max-w-[9rem]',
            'lg:fixed lg:right-auto lg:top-auto',
          ]}
        />
      </div>
    )
  }

  <!-- TODO: May need to update if I want a toc with a gallery section -->
  {
    !!headings && (
      <nav class='project-toc'>
        <ProjectToc
          headings={headings}
          maxDepth={3}
          class='lg:fixed'
        />
      </nav>
    )
  }

  <section class='prose project-body'>
    <Content />
  </section>
</ContentLayout>

<style is:global>
  .project-grid {
    display: grid;

    grid-template-columns: 1fr;
    grid-template-areas:
      'head'
      'toc '
      'body';

    /* @screen md {
    grid-template-columns: 3fr 1fr;
  } */

    @screen lg {
      column-gap: 3rem;
      grid-template-columns: 5fr 2fr;
      grid-template-areas:
        'head hero'
        'body toc';
    }
  }

  .project-head {
    grid-area: head;
  }

  .project-hero {
    grid-area: head;

    @screen lg {
      grid-area: hero;
    }
  }

  .project-body {
    grid-area: body;
  }

  .project-toc {
    grid-area: toc;
  }
</style>
